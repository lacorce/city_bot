from aiogram import Router
from aiogram import types
from aiogram.filters import Command, CommandStart
from admin.keyboard.keyboard import admin_key
import random
import aiofiles
from database import database as db
from aiogram.filters import CommandObject

user_rou = Router()
game_active = False
used_cities = []
user_scores = []
current_city = None


async def initialize_bot():
    global cities_database, current_city, game_active, used_cities
    cities_file = 'city.txt'
    cities_database = await load_cities(cities_file)
    return cities_database


async def load_cities(file_path):
    try:
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as file:
            cities = [line.strip() for line in await file.readlines()]
    except FileNotFoundError:
        cities = []
    return cities


def get_last_letter(city):
    last_letter = city[-1]
    if last_letter in "—Ü—ã—å":
        return city[-2].capitalize()
    else:
        return last_letter.capitalize()


def normalize_city_name(city):
    return city.strip().capitalize()


@user_rou.message(CommandStart())
async def start_game(message: types.Message):
    global current_city, game_active, used_cities
    if message.from_user.id == 6292728634 and message.chat.type == 'private':
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,{message.from_user.full_name}üèô\n'
                             '–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!', reply_markup=admin_key)
    if message.chat.type != 'private' and not game_active:
        game_active = True
        cities_database = await initialize_bot()
        current_city = random.choice(cities_database)
        used_cities = [current_city]
        last = get_last_letter(current_city)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞.\n"
                            f"–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç: {current_city}.\n"
                            f"–¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É '{last}'.\n")


@user_rou.message(Command('stop'))
async def stop_game(message: types.Message):
    global game_active, used_cities
    if message.chat.type != 'private' and game_active:
        game_active = False
        used_cities = []
    if not user_scores:
        game_status_not = "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!üëã"
        await message.reply(game_status_not)
    if user_scores:
        for user in user_scores:
            game_stats = "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!üëã\n–ò–≥—Ä–æ–∫–∏/–ë–∞–ª–ª—ã:\n"
            game_stats += f"üë§{user['name']}: {user['score']}\n"
            first_name = user['name']
            balls = user['score']
            await db.add_statistic(first_name, balls)
        await message.reply(game_stats)


@user_rou.message(Command('statistic'))
async def show_statistic(message: types.Message):
    user_scores = await db.get_statistic()
    info = (f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n"
            f"–ò–≥—Ä–æ–∫–∏/–ë–∞–ª–ª—ã:\n")
    for user in user_scores:
        info += f"üë§{user[0]}: {user[1]}\n"
    await message.answer(info)


@user_rou.message(Command('add_city'))
async def cmd_settimer(
        message: types.Message,
        command: CommandObject

):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n –ü—Ä–∏–º–µ—Ä:"
            "<code>/add_city '–ì–æ—Ä–æ–¥'</code>", parse_mode='HTML'
        )
        return
    try:
        text_to_send = command.args.split(" ")
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/add_city <–ì–æ—Ä–æ–¥>"
        )
        return
    for user_city_application in text_to_send:
        await message.answer(
            '–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–Ω–∞!\n'
            f'–í–∞—à –ø—Ä–µ–¥–ª–æ–∂–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ - {user_city_application}')
        name = user_city_application
        await db.add_application(name)


@user_rou.message()
async def handle_city(message: types.Message):
    global current_city, game_active, used_cities, user_scores
    first_name = message.from_user.first_name
    await db.add_user(first_name)
    cities_database = await load_cities('city.txt')

    if message.chat.type != 'private' and game_active:
        input_city = normalize_city_name(message.text)
        if input_city in used_cities:
            await message.reply("‚ùå–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
            return

        if input_city not in [normalize_city_name(city) for city in cities_database]:
            await message.reply(
                "ü§î–≠—Ç–æ –Ω–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ(–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ –Ω–∞ –º–æ–¥—Ä–µ–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–º–∞–Ω–¥—ã -/add_city."
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        last_letter = get_last_letter(current_city)
        if input_city[0].upper() != last_letter:
            await message.reply(f"‚ùó–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã '{last_letter}'. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        else:
            used_cities.append(input_city)
            current_city = input_city
            user_name = message.from_user.first_name

            user_found = False
            for user in user_scores:
                if user['name'] == user_name:
                    user['score'] += 1
                    user_found = True
                    break

            if not user_found:
                user_scores.append({'name': user_name, 'score': 1})

            await message.reply(f"‚úÖ–í–µ—Ä–Ω–æ! –í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ '{input_city}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–∞–≤–∞–π –¥–∞–ª—å—à–µ! "
                                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É '{get_last_letter(input_city)}'. ")
